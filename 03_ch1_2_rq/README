This is a reading quiz for Chapters 1 and 2. Once you have read and
understood these chapters, you are ready to do the reading quiz. 

For this quiz (and others), place your answers to the following
questions in a file called "answers.txt". You should put one answer
per line and can just list the letter. You may put a number before it
if you want--the grader will look at the first letter of each line as
your answer. When you are done, add, commit, and push the file with
git before running "grade 03_ch1_2_rq". (Note: you can actually just
run "grade" with no arguments if you are in the directory for the
assignment you want to grade.)

1.  What is an algorithm?

    A.  A clear set of steps to solve any instance of a particular
        class of problems
    B.  A mathematical function that helps you solve a specific
        problem 
    C.  An American politician who warns about climate change
    D.  The output of a program

2.  If you are starting a new programming problem, and you are unable
    to work an example by hand, which of the following could be a
    viable path forward?
    
    A.  Consult reference material for your programming language to
        find more useful library functions.
    B.  Ask a mathematician to help you find the function which
        describes a sequence of numbers.
    C.  Gain more domain knowledge for the particular problem's
        domain. 
    D.  Skip this step and move on to writing code.

3.  What are parameters?

    A.  The assumed conditions under which an algorithm is written. If
        these are not met, the algorithm will not function properly. 
    B.  Lines of code, such as "if" which let the program make
        decisions.
    C.  Symbolic placeholders in an algorithm for the values which
        specify what particular instance of the problem is being
	solved.
    D.  Invariant of an algorithm, which describe mathematical
        relationships between variables that are always guaranteed to
	be true at particular places in the code.

4.  Why will you work with many numerical/mathematical
    problems/examples? 

    A.  Computers can only operate on numbers.
    B.  Math problems are easier to write.
    C.  Math-based problems are inherently more precise than
        word-based problems. 
    D.  People usually use computers for numerical calculation.

5.  What are "corner cases"?

    A.  Combinations of parameter values that require special
        handling
    B.  Patterns that are difficult to find due to their non-linear
        nature
    C.  Syntax errors that crash the program
    D.  Triangular storage units

6.  What does the term "semantics" mean in the context of programming?

    A.  The rules for constructing "grammatically correct" programs
    B.  The rules describing the meaning of syntactically correct code
    C.  The rules for fixing problems with broken code
    D.  The rules describing how to divide code into functions

7.  What is an "lvalue"?

    A.  A value that can be the left operand of an operator
    B.  A value that can be placed into a box
    C.  A value that names a box
    D.  A value that is elevated through the evaluation of an
    	expression

8.  What does "scope" mean?

    A.  The types of values that a variable can hold
    B.  The region of code in which a variable is visible
    C.  The kinds of problem that a function can solve
    D.  The amount of domain knowledge required to write a particular
    	program

9.  What is the difference between printing a value and returning
    a value?
    
    A.  Printing a value leaves the current function, while returning
        a value does not. 
    B.  Printing a value gives it to the user, while returning a value
        gives it to other code for further computation. 
    C.  Printing a value only works on strings, while returning a
        value only works on integers.
    D.  None of the above

10. If C did not have the keyword "for" but you wanted to write
    something where a for-loop were the natural choice, what could you
    use instead?
    
    A.  if
    B.  while
    C.  return
    D.  break
